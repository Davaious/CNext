"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CORE_SDK_NOT_INITIALIZED = exports.ensureWidgetEmbeddedInIframe = exports.injectConnectors = exports.getSdkInfoReporter = void 0;
const detect_provider_1 = __importDefault(require("@metamask/detect-provider"));
const injectConnectors_1 = require("./core/injectConnectors");
const logging_1 = require("./core/logging");
const publicUtils_1 = require("./publicUtils");
const sdkInfo_1 = require("./sdkInfo");
const widget_1 = require("./widget");
const apiEvents_1 = require("./widget/apiEvents");
const socialLoginInfo_1 = require("./widget/socialLoginInfo");
var sdkInfo_2 = require("./sdkInfo");
Object.defineProperty(exports, "getSdkInfoReporter", { enumerable: true, get: function () { return sdkInfo_2.getSdkInfoReporter; } });
var injectConnectors_2 = require("./core/injectConnectors");
Object.defineProperty(exports, "injectConnectors", { enumerable: true, get: function () { return injectConnectors_2.injectConnectors; } });
var widget_2 = require("./widget");
Object.defineProperty(exports, "ensureWidgetEmbeddedInIframe", { enumerable: true, get: function () { return widget_2.ensureWidgetEmbeddedInIframe; } });
Object.defineProperty(exports, "CORE_SDK_NOT_INITIALIZED", { enumerable: true, get: function () { return widget_2.CORE_SDK_NOT_INITIALIZED; } });
__exportStar(require("./core/types"), exports);
__exportStar(require("./publicUtils"), exports);
__exportStar(require("./widget/types"), exports);
__exportStar(require("./widget/web3AuthProviders"), exports);
let initResult = null;
const init = (origin = 'https://wallet.nu.fi', iframeOptions) => {
    const { hideWidget, sendSimplePostMessage } = (0, widget_1.ensureWidgetEmbeddedInIframe)({
        type: 'prefetch',
        baseUrl: `${origin}/widget`,
        iframeOptions,
    });
    (0, apiEvents_1.registerWidgetApiEvents)(origin);
    return {
        hideWidget,
        sendSimplePostMessage,
    };
};
const signOutMessage = {
    appId: 'nufi',
    method: 'signOut',
};
const getApi = () => {
    if (initResult == null) {
        throw new Error(widget_1.CORE_SDK_NOT_INITIALIZED);
    }
    const { hideWidget, sendSimplePostMessage } = initResult;
    return {
        getSocialLoginInfo: socialLoginInfo_1.exposeSocialLoginInfo,
        hideWidget,
        onSocialLoginInfoChanged: socialLoginInfo_1.onSocialLoginInfoChanged,
        signOut: () => sendSimplePostMessage(signOutMessage),
        isMetamaskInstalled,
    };
};
const getContext = () => {
    if (initResult == null) {
        throw new Error(widget_1.CORE_SDK_NOT_INITIALIZED);
    }
    return {
        ensureWidgetEmbeddedInIframe: widget_1.ensureWidgetEmbeddedInIframe,
        ensureChannelIsReady: publicUtils_1.ensureChannelIsReady,
        injectConnectors: injectConnectors_1.injectConnectors,
    };
};
const isMetamaskInstalled = () => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const provider = yield (0, detect_provider_1.default)({ mustBeMetaMask: true });
        if (!provider)
            return false;
        // Note that:
        // -> We are not reusing @nufi/metamask-snap to avoid public packages being
        // interconnected with our non-public packages.
        // -> Even if our snap is installed, this returns empty result, because the dapp
        // calls it from its domain, and the snap installation is bound to NuFi domain.
        // See https://docs.metamask.io/wallet/reference/wallet_getsnaps
        // -> We expect this calls to not be implemented by the majority of wallets emulating
        // metamask, and this call to throw, though we can not guarantee that.
        yield provider.request({
            method: 'wallet_getSnaps',
        });
        return true;
    }
    catch (err) {
        return false;
    }
});
const publicNufiCoreSdk = {
    __getContext: getContext,
    __setLogLevel: logging_1.setLogLevel,
    __logger: logging_1.logger,
    __getSdkInfo: sdkInfo_1.getCoreSdkInfo,
    getApi,
    init: (origin, iframeOptions) => {
        initResult = init(origin, iframeOptions);
    },
};
exports.default = publicNufiCoreSdk;
//# sourceMappingURL=index.js.map